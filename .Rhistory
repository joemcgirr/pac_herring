print(p)
#PBS
p <- ggplot(fst, aes(x = midPos, y = PBS0)) +
geom_point(size = 1, color = gry,alpha = 0.4, shape = 1)+
theme_minimal()+
theme(axis.text.x=element_blank())+
ylab("PBS\n")+ xlab("")+
ggtitle(paste(pops[1]))+
geom_smooth(method = "loess", se = FALSE, span = 1/10, color = red)+
facet_wrap(~chr, ncol = 9)
print(p)
p <- ggplot(fst, aes(x = midPos, y = PBS1)) +
geom_point(size = 1, color = gry,alpha = 0.4, shape = 1)+
theme_minimal()+
theme(axis.text.x=element_blank())+
ylab("PBS\n")+ xlab("")+
ggtitle(paste(pops[2]))+
geom_smooth(method = "loess", se = FALSE, span = 1/10, color = red)+
facet_wrap(~chr, ncol = 9)
print(p)
p <- ggplot(fst, aes(x = midPos, y = PBS2)) +
geom_point(size = 1, color = gry,alpha = 0.4, shape = 1)+
theme_minimal()+
theme(axis.text.x=element_blank())+
ylab("PBS\n")+ xlab("")+
ggtitle(paste(pops[3]))+
geom_smooth(method = "loess", se = FALSE, span = 1/10, color = red)+
facet_wrap(~chr, ncol = 9)
print(p)
}
fsts <- list.files(path="C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/fst_pbs/maf05/", full.names=T)
fsts
pops <- strsplit(f, "_")
pops <- c(pops[[1]][10], pops[[1]][11],gsub("\\.txt","",pops[[1]][12]))
pops
fst <-read.delim(paste("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/fst_pbs/maf05/fst_pbs_50kb_win_10kb_step_folded_",pops[1],"_",pops[2],"_",pops[3],".txt", sep = ""))
library(knitr)
my.jekyll.site <- ""
KnitPost <- function(input, base.url = my.jekyll.site) {
opts_knit$set(base.url = base.url)
fig.path <- paste0("images/", sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
knit(input, envir = parent.frame())
}
setwd("C:/Users/jmcgirr/Documents/GitHub/pac_herring/")
KnitPost("C:/Users/jmcgirr/Documents/GitHub/pac_herring/README.Rmd")
library(knitr)
my.jekyll.site <- ""
KnitPost <- function(input, base.url = my.jekyll.site) {
opts_knit$set(base.url = base.url)
fig.path <- paste0("images/", sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
knit(input, envir = parent.frame())
}
setwd("C:/Users/jmcgirr/Documents/GitHub/pac_herring/")
KnitPost("C:/Users/jmcgirr/Documents/GitHub/pac_herring/README.Rmd")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(reticulate)
library(ggpubr)
# color-blind friendly
# Wong, B. Points of view: Color blindness. Nat Methods (2011).
bla <- "#000000"
blu <- "#0072b2"
grb <- "#56b4e9"
lir <- "#cc79a7"
gre <- "#009e73"
red <- "#d55e00"
org <- "#e69f00"
yel <- "#f0e442"
gry<-  '#BBBBBB'
pop_info <- read.table("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/familiarize/EVOS_MasterSheet_JoeMcGirr_April2020.txt", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
bam_met_files <- list.files("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/familiarize/multiqc_data/wgsMetrics/")
met_files_in_pop_info <- c()
for(met_file in bam_met_files){
met_files_in_pop_info <- c(met_files_in_pop_info,strsplit(met_file,"\\.collect_wgs_metrics.txt")[[1]])
}
pop_info <- pop_info[pop_info$Sample %in% met_files_in_pop_info, ]
sample_name <- pop_info$Sample[1]
bam_met <- paste("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/familiarize/multiqc_data/wgsMetrics/",sample_name, ".collect_wgs_metrics.txt", sep = "")
bam_met <- read.table(bam_met, header = TRUE, stringsAsFactors = FALSE, nrow= 1)
bam_met$Sample <- sample_name
pop_info_bams <- merge(pop_info,bam_met, by = "Sample")
for (sample_name in pop_info$Sample[2:(length(pop_info$Sample))])
{
bam_met <- paste("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/familiarize/multiqc_data/wgsMetrics/",sample_name, ".collect_wgs_metrics.txt", sep = "")
bam_met <- read.table(bam_met, header = TRUE, stringsAsFactors = FALSE, nrow= 1)
bam_met$Sample <- sample_name
pop_info_bams1 <- merge(pop_info,bam_met, by = "Sample")
pop_info_bams <- rbind(pop_info_bams,pop_info_bams1)
}
p1 <- ggplot(pop_info_bams,aes(factor(Year.Collected), MEAN_COVERAGE))+
geom_violin()+ xlab("year collected") + ylab("mean coverage")+
#geom_boxplot(width=0.1)
theme_minimal()+
geom_jitter(height = 0, width = 0.1, alpha = 0.1)+
stat_compare_means(method = "anova", label.y = max(pop_info_bams$MEAN_COVERAGE)+(max(pop_info_bams$MEAN_COVERAGE)*.05),label.x = 2.25)      # Add global p-value
p1
an <- aov(pop_info_bams$MEAN_COVERAGE~factor(pop_info_bams$Year.Collected))
#summary(an)
TukeyHSD(an)
p1 <- ggplot(pop_info_bams,aes(factor(Year.Collected), PCT_EXC_TOTAL))+
geom_violin()+ xlab("\nyear collected") + ylab("% bases excluded due to all filters\n")+
#geom_boxplot(width=0.1)
theme_minimal()+
geom_jitter(height = 0, width = 0.1, alpha = 0.1)+
stat_compare_means(method = "anova", label.y = max(pop_info_bams$PCT_EXC_TOTAL)+(max(pop_info_bams$PCT_EXC_TOTAL)*.05),label.x = 2.25)      # Add global p-value
p1
an <- aov(pop_info_bams$PCT_EXC_TOTAL~factor(pop_info_bams$Year.Collected))
#summary(an)
TukeyHSD(an)
p1 <- ggplot(pop_info_bams,aes(factor(Year.Collected), PCT_1X))+
geom_violin()+ xlab("\nyear collected") + ylab("% bases with >= 1X coverage post-filtering\n")+
#geom_boxplot(width=0.1)
theme_minimal()+
geom_jitter(height = 0, width = 0.1, alpha = 0.1)+
stat_compare_means(method = "anova", label.y = max(pop_info_bams$PCT_1X)+(max(pop_info_bams$PCT_1X)*.05),label.x = 2.25)      # Add global p-value
p1
an <- aov(pop_info_bams$PCT_1X~factor(pop_info_bams$Year.Collected))
#summary(an)
TukeyHSD(an)
p1 <- ggplot(pop_info_bams,aes(factor(Location), MEAN_COVERAGE))+
geom_violin()+ xlab("population location") + ylab("mean coverage")+
#geom_boxplot(width=0.1)
theme_minimal()+
geom_jitter(height = 0, width = 0.1, alpha = 0.1)#+
#stat_compare_means(method = "anova", label.y = max(pop_info_bams$MEAN_COVERAGE)+(max(pop_info_bams$MEAN_COVERAGE)*.05),label.x = 2.25)      # Add global p-value
p1
an <- aov(pop_info_bams$MEAN_COVERAGE~factor(pop_info_bams$Location))
#summary(an)
#TukeyHSD(an)
p1 <- ggplot(pop_info_bams,aes(factor(Location), PCT_EXC_TOTAL))+
geom_violin()+ xlab("\npopulation location") + ylab("% bases excluded due to all filters\n")+
#geom_boxplot(width=0.1)
theme_minimal()+
geom_jitter(height = 0, width = 0.1, alpha = 0.1)#+
#stat_compare_means(method = "anova", label.y = max(pop_info_bams$PCT_EXC_TOTAL)+(max(pop_info_bams$PCT_EXC_TOTAL)*.05),label.x = 2.25)      # Add global p-value
p1
an <- aov(pop_info_bams$PCT_EXC_TOTAL~factor(pop_info_bams$Location))
#summary(an)
#TukeyHSD(an)
p1 <- ggplot(pop_info_bams,aes(factor(Location), PCT_1X))+
geom_violin()+ xlab("\npopulation location") + ylab("% bases with >= 1X coverage post-filtering\n")+
#geom_boxplot(width=0.1)
theme_minimal()+
geom_jitter(height = 0, width = 0.1, alpha = 0.1)#+
#stat_compare_means(method = "anova", label.y = max(pop_info_bams$PCT_1X)+(max(pop_info_bams$PCT_1X)*.05),label.x = 2.25)      # Add global p-value
p1
an <- aov(pop_info_bams$PCT_1X~factor(pop_info_bams$Location))
#summary(an)
#TukeyHSD(an)
pop_info <- read.table("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/familiarize/EVOS_MasterSheet_JoeMcGirr_April2020.txt", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
aligned <- read.table("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/familiarize/aligned_samples.txt", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
pop_info <- pop_info[pop_info$Sample %in% aligned$sample,]
vcf_samples <- read.table("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/plink/plates_1_through_5_rm.txt", header = FALSE, stringsAsFactors = FALSE, sep = "\t")
names(vcf_samples)[names(vcf_samples)=="V1"] <- "Sample"
vcf_sample_info <- inner_join(vcf_samples,pop_info, by = "Sample")
sfiles <- list.files(path="C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/ngsadmix/qfiles/", full.names=T)
slist <- readQ(files=sfiles,indlabfromfile = FALSE)
onelabset <-vcf_sample_info[,3,drop=FALSE]
rownames(slist[[3]]) <- vcf_sample_info$Sample
#if(length(unique(sapply(slist,nrow)))==1) slist <- lapply(slist,"rownames<-",labs$ind)
# for (i in c(1:6)){
# p1 <- plotQ(slist[i],returnplot=T,exportplot=F,basesize=17,showindlab=F,useindlab=T,
#             sortind="all",grplab = onelabset,
#             grplabsize=6,linesize=2,pointsize=8, grplabangle=0, grplabjust=0.3, grplabheight=7,
#             divcol="white",divtype=2, divsize=1,clustercol=c(grb,org,red,yel,blu,lir,gry))
# plot(p1$plot[[1]])
# }
#attributes(slist)
subsetpops <- c("BC17","CA17","PWS17","SS17","TB17","WA17")
#subsetpops <- c("TB91","TB96","TB06","TB17")
#subsetpops <- c("PWS91","PWS96","PWS07","PWS17")
#subsetpops <- c("SS96","SS06","SS17")
#subsetpops <- c("BC17","CA17","WA17")
for (i in c(12,14,15,16,17)){
p1 <- plotQ(slist[i],returnplot=T,exportplot=F,basesize=17,showindlab=F,useindlab=T,
sortind="all",grplab = onelabset,subsetgrp=subsetpops,
grplabsize=6,linesize=2,pointsize=8, grplabangle=0, grplabjust=0.3, grplabheight=7,
divcol="white",divtype=2, divsize=1,clustercol=c(grb,org,red,yel,blu,lir,gry))
plot(p1$plot[[1]])
}
# choose K with CLUMPAK
#https://github.com/alexkrohn/AmargosaVoleTutorials/blob/master/ngsAdmix_tutorial.md
# (for log in `ls *.log`; do grep -Po 'like=\K[^ ]+' $log; done) > logfile
# some jobs didnt finish k19 and k20, so just using 18
logs <- as.data.frame(read.table("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/ngsadmix/likelihoods_all_reps.txt", header = TRUE))
logs <- logs[logs$K < 19,]
logs$K <- c(rep("1", 10), rep("2", 10), rep("3", 10), rep("4",
10), rep("5", 10), rep("6", 10), rep("7", 10), rep("8", 10))
write.table(logs[, c(2, 1)], "logfile_formatted", row.names = F,
col.names = F, quote = F)
# source("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/angsd/NGSadmix/evalAdmix/visFuns.R")
#
# r<-read.table("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/angsd/NGSadmix/evalAdmix/eval_k3_chr1_ph_filtered_snps_minDP600_maxDP2000_maf0.# 05_minQ20_maxmiss0.5")
# q <- read.table("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/angsd/NGSadmix/qfiles/chr1/k3_chr1_ph_filtered_snps_minDP600_maxDP2000_maf0.0# 5_minQ20_maxmiss0.5.qopt")
# ord<-orderInds(pop = as.vector(vcf_sample_info$Population.Year), q = q)
#
# # Plot correlation of residuals
# plotCorRes(cor_mat = r, pop = as.vector(vcf_sample_info$Population.Year), ord = ord, title="Evaluation of admixture proportions with K=3", # max_z=0.1, min_z=-0.1)
pop_info <- read.table("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/familiarize/EVOS_MasterSheet_JoeMcGirr_April2020.txt", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
aligned <- read.table("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/familiarize/aligned_samples.txt", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
pop_info <- pop_info[pop_info$Sample %in% aligned$sample,]
vcf_samples <- read.table("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/plink/plates_1_through_5_rm.txt", header = FALSE, stringsAsFactors = FALSE, sep = "\t")
names(vcf_samples)[names(vcf_samples)=="V1"] <- "Sample"
vcf_sample_info <- inner_join(vcf_samples,pop_info, by = "Sample")
sfiles <- list.files(path="C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/ngsadmix/qfiles/", full.names=T)
slist <- readQ(files=sfiles,indlabfromfile = FALSE)
onelabset <-vcf_sample_info[,3,drop=FALSE]
rownames(slist[[3]]) <- vcf_sample_info$Sample
# if (!requireNamespace("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install(version = "3.12")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(reticulate)
library(ggpubr)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(ggspatial)
library(pophelper)
library(rgeos)
library(data.table)
#BiocManager::install(c('magrittr', 'RcppArmadillo', 'rlang', 'tibble', 'vctrs', 'xfun'))
#devtools::install_github('royfrancis/pophelper')
#BiocManager::install("geiger")
# color-blind friendly
# Wong, B. Points of view: Color blindness. Nat Methods (2011).
bla <- "#000000"
blu <- "#0072b2"
grb <- "#56b4e9"
lir <- "#cc79a7"
gre <- "#009e73"
red <- "#d55e00"
org <- "#e69f00"
yel <- "#f0e442"
gry<-  '#BBBBBB'
pop_info <- read.table("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/familiarize/EVOS_MasterSheet_JoeMcGirr_April2020.txt", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
aligned <- read.table("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/familiarize/aligned_samples.txt", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
pop_info <- pop_info[pop_info$Sample %in% aligned$sample,]
vcf_samples <- read.table("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/plink/plates_1_through_5_rm.txt", header = FALSE, stringsAsFactors = FALSE, sep = "\t")
names(vcf_samples)[names(vcf_samples)=="V1"] <- "Sample"
vcf_sample_info <- inner_join(vcf_samples,pop_info, by = "Sample")
sfiles <- list.files(path="C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/ngsadmix/qfiles/", full.names=T)
slist <- readQ(files=sfiles,indlabfromfile = FALSE)
onelabset <-vcf_sample_info[,3,drop=FALSE]
rownames(slist[[3]]) <- vcf_sample_info$Sample
#attributes(slist)
subsetpops <- c("BC17","CA17","PWS17","SS17","TB17","WA17")
for (i in c(12,14,15,16,17)){
p1 <- plotQ(slist[i],returnplot=T,exportplot=F,basesize=17,showindlab=F,useindlab=T,
sortind="all",grplab = onelabset,subsetgrp=subsetpops,
grplabsize=6,linesize=2,pointsize=8, grplabangle=0, grplabjust=0.3, grplabheight=7,
divcol="white",divtype=2, divsize=1,clustercol=c(grb,org,red,yel,blu,lir,gry))
plot(p1$plot[[1]])
}
# if (!requireNamespace("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install(version = "3.12")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(reticulate)
library(ggpubr)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(ggspatial)
library(pophelper)
library(rgeos)
library(data.table)
#BiocManager::install(c('magrittr', 'RcppArmadillo', 'rlang', 'tibble', 'vctrs', 'xfun'))
#devtools::install_github('royfrancis/pophelper')
#BiocManager::install("geiger")
# color-blind friendly
# Wong, B. Points of view: Color blindness. Nat Methods (2011).
bla <- "#000000"
blu <- "#0072b2"
grb <- "#56b4e9"
lir <- "#cc79a7"
gre <- "#009e73"
red <- "#d55e00"
org <- "#e69f00"
yel <- "#f0e442"
gry<-  '#BBBBBB'
pop_info <- read.table("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/familiarize/EVOS_MasterSheet_JoeMcGirr_April2020.txt", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
aligned <- read.table("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/familiarize/aligned_samples.txt", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
pop_info <- pop_info[pop_info$Sample %in% aligned$sample,]
vcf_samples <- read.table("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/plink/plates_1_through_5_rm.txt", header = FALSE, stringsAsFactors = FALSE, sep = "\t")
names(vcf_samples)[names(vcf_samples)=="V1"] <- "Sample"
vcf_sample_info <- inner_join(vcf_samples,pop_info, by = "Sample")
sfiles <- list.files(path="C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/ngsadmix/qfiles/", full.names=T)
slist <- readQ(files=sfiles,indlabfromfile = FALSE)
onelabset <-vcf_sample_info[,3,drop=FALSE]
rownames(slist[[3]]) <- vcf_sample_info$Sample
#attributes(slist)
subsetpops <- c("BC17","CA17","PWS17","SS17","TB17","WA17")
for (i in c(12,14,15,16,17)){
p1 <- plotQ(slist[i],returnplot=T,exportplot=F,basesize=17,showindlab=F,useindlab=T,
sortind="all",grplab = onelabset,subsetgrp=subsetpops,
grplabsize=6,linesize=2,pointsize=8, grplabangle=0, grplabjust=0.3, grplabheight=7,
divcol="white",divtype=2, divsize=1,clustercol=c(grb,org,red,yel,blu,lir,gry))
plot(p1$plot[[1]])
}
logs <- as.data.frame(read.table("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/ngsadmix/likelihoods_all_reps.txt", header = TRUE))
logs <- logs[logs$K < 19,]
logs$K <- c(rep("1", 10), rep("2", 10), rep("3", 10), rep("4",
10), rep("5", 10), rep("6", 10), rep("7", 10), rep("8", 10))
logs <- as.data.frame(read.table("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/ngsadmix/likelihoods_all_reps.txt", header = TRUE))
logs <- logs[logs$K < 19,]
logs$K <- c(rep("1", 10), rep("2", 10), rep("3", 10), rep("4", 10), rep("5", 10), rep("6", 10), rep("7", 10), rep("8", 10))
# knownEM specifies the algorithm used to estimate the allele frequency which is given under that column. Please note that this refers to the allele frequency of the allele labeled as minor.
# maf file created using -ref to polarize.
# this will allow us to assign frequencies to REF and ALT rather than major and minor
# the latter will vary at some sites by population
# check all coding mutations
lof <- rbind(stop_gained,start_lost,stop_lost)
#lof <- rbind(stop_gained,start_lost,stop_lost,missense)
# #check individual types of mutations
# lof <- stop_gained
# lof <- missense
# lof <- rbind(stop_gained,missense)
lof <- unique(lof[c("Location")])
lof <- lof %>% separate(Location, into = c("chromo","position"), sep = ":")
lof$chromo <- paste("chr",lof$chromo, sep = "")
pop <- "PWS91"
maf <-read.delim(paste("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/LoF/mafs/",pop,"_ph_filtered_snps_minDP600_maxDP2000_minQ20_minMQ30_NS0.5_maf0.05.mafs", sep = ""), header =TRUE)
maf <- maf[c("chromo","position", "knownEM")]
colnames(maf)[colnames(maf)=="knownEM"] <- pop
maf <- merge(lof,maf, by = c("chromo","position"))
pop_names = c("PWS96","PWS07","PWS17","TB91","TB96","TB06","TB17","SS96","SS06","SS17","BC17","WA17","CA17")
for (pop in pop_names) {
maf1 <-read.delim(paste("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/LoF/mafs/",pop,"_ph_filtered_snps_minDP600_maxDP2000_minQ20_minMQ30_NS0.5_maf0.05.mafs", sep = ""), header =TRUE)
maf1 <- maf1[c("chromo","position", "knownEM")]
colnames(maf1)[colnames(maf1)=="knownEM"] <- pop
maf <- merge(maf,maf1, by = c("chromo","position"))
}
# check for significant differences in LoF allele frequencies
maf_box <- maf[,3:16]
maf_box %>%
gather(key="MesureType", value="Val") %>%
ggplot( aes(x=MesureType, y=Val, fill=MesureType)) +
geom_boxplot()+
xlab("\npopulation/year") + ylab("LoF allele frequency\n")+
#geom_violin()+
theme_minimal()+
#geom_jitter(height = 0, width = 0.1, alpha = 0.1)+
scale_fill_manual(values=c(grb,org,red,red,red,red,yel,yel,yel,blu,blu,blu,blu,lir))
maf_box <- maf[,3:13]
names(maf_box) <- as.character(c(1:9,99,999))
maf_box %>%
gather(key="MesureType", value="Val") %>%
ggplot( aes(x=MesureType, y=Val, fill=MesureType)) +
geom_boxplot()+
xlab("\npopulation/year") + ylab("LoF allele frequency\n")+
#geom_violin()+
theme_minimal()+
#geom_jitter(height = 0, width = 0.1, alpha = 0.1)+
scale_fill_manual(values=c(red,red,red,red,yel,yel,yel,blu,blu,blu,blu))
maf_stack <- stack(maf_box)
print("anova for all populations")
an <- aov(maf_stack$value~maf_stack$ind)
summary(an)
TukeyHSD(an)
focal_pops <- c("PWS91","PWS96","PWS07","PWS17")
print("anova for focal populations:")
print(focal_pops)
maf_stack <- stack(maf_box[c(focal_pops)])
an <- aov(maf_stack$value~maf_stack$ind)
summary(an)
TukeyHSD(an)
focal_pops <- c("PWS96","PWS07","PWS17","SS96","SS06","SS17")
print("anova for focal populations:")
print(focal_pops)
maf_stack <- stack(maf_box[c(focal_pops)])
an <- aov(maf_stack$value~maf_stack$ind)
summary(an)
TukeyHSD(an)
# ensure REF and ALT match maf output
# test <- vep[c("Location", "Allele")]
# test <- unique(test)
# test <- test %>% separate(Location, into = c("chr","position"))
# test$chrs <- "chr"
# test$chromo <- paste(test$chrs, test$chr, sep = "")
# colnames(test)[3] <- "minor"
# test1 <- merge(maf, test, by = c("chromo", "position"))
# test2 <- merge(maf, test, by = c("chromo", "position", "minor"))
# nrow(test1)-nrow(test2)
# check all coding mutations
lof <- rbind(stop_gained,start_lost,stop_lost)
#### format SNP table (output from gatk variantsToTable function)
# snp <-read.delim("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/LoF/ph_filtered_snps_minDP600_maxDP2000_minQ20_minMQ30_NS0.5_maf0.05_table_VEP.txt", header =FALSE)
# head(snp)
# snp <- snp %>% separate(V1, into = c("chromosome","start","REF", "ALT"), sep =":")
# snp$end <- snp$start
# snp$allele <- paste(snp$REF, snp$ALT, sep = "/")
# snp$strand <- "+"
# snp <- snp[c("chromosome", "start","end","allele","strand")]
#write.table(snp, "C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/LoF/ph_filtered_snps_minDP600_maxDP2000_minQ20_minMQ30_NS0.5_maf0.05_snp_table_VEP_standard_format.txt", col.names = FALSE, row.names = FALSE, sep = "\t", quote = FALSE)
# identify missense
vep <-read.delim("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/LoF/ph_filtered_snps_minDP600_maxDP2000_minQ20_minMQ30_NS0.5_maf0.05_VEP.txt", header =FALSE,comment.char = "#")
head(vep)
colnames(vep) <- c("Uploaded_variation","Location","Allele","Gene","Feature","Feature_type","Consequence","cDNA_position","CDS_position","Protein_position","Amino_acids","Codons","Existing_variation","Extra")
unique(vep$Consequence)
stop_gained <- vep[grepl('stop_gained', vep$Consequence), ]
start_lost <- vep[grepl('start_lost', vep$Consequence), ]
stop_lost <- vep[grepl('stop_lost', vep$Consequence), ]
missense <- vep[grepl('missense', vep$Consequence), ]
print("stop gained alleles")
nrow(stop_gained)
print("start lost alleles")
nrow(start_lost)
print("stop lost alleles")
nrow(stop_lost)
print("missense alleles")
nrow(missense)
#head(vep$Uploaded_variation, 50)
stop_gained
# check all coding mutations
lof <- rbind(stop_gained,start_lost,stop_lost)
lof <- unique(lof[c("Location")])
lof <- lof %>% separate(Location, into = c("chromo","position"), sep = ":")
lof$chromo <- paste("chr",lof$chromo, sep = "")
pop <- "PWS91"
maf <-read.delim(paste("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/LoF/mafs/",pop,"_ph_filtered_snps_minDP600_maxDP2000_minQ20_minMQ30_NS0.5_maf0.05.mafs", sep = ""), header =TRUE)
maf <- maf[c("chromo","position", "knownEM")]
colnames(maf)[colnames(maf)=="knownEM"] <- pop
maf <- merge(lof,maf, by = c("chromo","position"))
pop_names = c("PWS96","PWS07","PWS17","TB91","TB96","TB06","TB17","SS96","SS06","SS17","BC17","WA17","CA17")
for (pop in pop_names) {
maf1 <-read.delim(paste("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/LoF/mafs/",pop,"_ph_filtered_snps_minDP600_maxDP2000_minQ20_minMQ30_NS0.5_maf0.05.mafs", sep = ""), header =TRUE)
maf1 <- maf1[c("chromo","position", "knownEM")]
colnames(maf1)[colnames(maf1)=="knownEM"] <- pop
maf <- merge(maf,maf1, by = c("chromo","position"))
}
maf[,3:16]
maf_box <- maf[,3:13]
names(maf_box) <- as.character(c(1:9,99,999))
maf_box %>%
gather(key="MesureType", value="Val") %>%
ggplot( aes(x=MesureType, y=Val, fill=MesureType)) +
geom_boxplot()+
xlab("\npopulation/year") + ylab("LoF allele frequency\n")+
#geom_violin()+
theme_minimal()+
#geom_jitter(height = 0, width = 0.1, alpha = 0.1)+
scale_fill_manual(values=c(red,red,red,red,yel,yel,yel,blu,blu,blu,blu))
maf_stack <- stack(maf_box)
print("anova for all populations")
an <- aov(maf_stack$value~maf_stack$ind)
summary(an)
TukeyHSD(an)
focal_pops <- c("PWS91","PWS96","PWS07","PWS17")
print("anova for focal populations:")
print(focal_pops)
maf_stack <- stack(maf_box[c(focal_pops)])
an <- aov(maf_stack$value~maf_stack$ind)
library(knitr)
my.jekyll.site <- ""
KnitPost <- function(input, base.url = my.jekyll.site) {
opts_knit$set(base.url = base.url)
fig.path <- paste0("images/", sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
knit(input, envir = parent.frame())
}
setwd("C:/Users/jmcgirr/Documents/GitHub/pac_herring/")
KnitPost("C:/Users/jmcgirr/Documents/GitHub/pac_herring/README.Rmd")
library(knitr)
my.jekyll.site <- ""
KnitPost <- function(input, base.url = my.jekyll.site) {
opts_knit$set(base.url = base.url)
fig.path <- paste0("images/", sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
knit(input, envir = parent.frame())
}
setwd("C:/Users/jmcgirr/Documents/GitHub/pac_herring/")
KnitPost("C:/Users/jmcgirr/Documents/GitHub/pac_herring/README.Rmd")
library(knitr)
my.jekyll.site <- ""
KnitPost <- function(input, base.url = my.jekyll.site) {
opts_knit$set(base.url = base.url)
fig.path <- paste0("images/", sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
knit(input, envir = parent.frame())
}
setwd("C:/Users/jmcgirr/Documents/GitHub/pac_herring/")
KnitPost("C:/Users/jmcgirr/Documents/GitHub/pac_herring/README.Rmd")
library(knitr)
my.jekyll.site <- ""
KnitPost <- function(input, base.url = my.jekyll.site) {
opts_knit$set(base.url = base.url)
fig.path <- paste0("images/", sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
knit(input, envir = parent.frame())
}
setwd("C:/Users/jmcgirr/Documents/GitHub/pac_herring/")
KnitPost("C:/Users/jmcgirr/Documents/GitHub/pac_herring/README.Rmd")
